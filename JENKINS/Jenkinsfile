pipeline {
  agent {
    label 'app'
  }
  environment {
    AWS_ACCOUNT_ID = "664057377606"
    AWS_DEFAULT_REGION = "us-east-1"
    IMAGE_REPO_NAME = "finalassignment"
    IMAGE_TAG = "latest"
    REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}"
  }

  stages {
    // Logging into AWS ECR
    stage('Logging into AWS ECR') {
      steps {
        script {
          sh "aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
        }

      }
    }
    
    //Cloning the repo
    stage('Cloning Git') {
      steps {
        git(
          url: "https://github.com/anuragsontakke07/Automating-CI-CD-with-Jenkins-pipeline.git",
          branch: "main"
        )
      }
    }

    // Building Docker images
    stage('Building image') {
      steps {
        script {
          dockerImage = docker.build "${IMAGE_REPO_NAME}:${IMAGE_TAG}"
        }
      }
    }

    // Uploading Docker images into AWS ECR
    stage('Pushing to ECR') {
      steps {
        script {
          sh "docker tag ${IMAGE_REPO_NAME}:${IMAGE_TAG} ${REPOSITORY_URI}:$IMAGE_TAG"
          sh "docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}:${IMAGE_TAG}"
        }
      }
    }

    //Build the image
    stage('Building the image') {
      steps {
        script {
          sh "docker build -t applicationimage:latest ."
        }
      }
    }

    //Deploy the image 
    stage('Deploying the image') {
      steps {
        script {
          sh '''#!/bin/bash
          if ["$(docker ps -a -q -f name=app)"];
          then
          docker rm - f app
          fi
          docker run - d - p 8080: 8081--name app applicationimage 
          '''
        }
      }
    }

  }
}